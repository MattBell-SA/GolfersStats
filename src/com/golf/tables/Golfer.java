/*
 * This file is generated by jOOQ.
 */
package com.golf.tables;


import com.golf.Keys;
import com.golf.Public;
import com.golf.tables.records.GolferRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Golfer extends TableImpl<GolferRecord> {

    private static final long serialVersionUID = 844542020;

    /**
     * The reference instance of <code>public.GOLFER</code>
     */
    public static final Golfer GOLFER = new Golfer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GolferRecord> getRecordType() {
        return GolferRecord.class;
    }

    /**
     * The column <code>public.GOLFER.GOLFER_ID</code>.
     */
    public final TableField<GolferRecord, Integer> GOLFER_ID = createField("GOLFER_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('\"GOLFER_GOLFER_ID_seq\"'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.GOLFER.GOLFER_TITLE</code>.
     */
    public final TableField<GolferRecord, String> GOLFER_TITLE = createField("GOLFER_TITLE", org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>public.GOLFER.GOLFER_NAME</code>.
     */
    public final TableField<GolferRecord, String> GOLFER_NAME = createField("GOLFER_NAME", org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>public.GOLFER.GOLFER_ADRESS</code>.
     */
    public final TableField<GolferRecord, String> GOLFER_ADRESS = createField("GOLFER_ADRESS", org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>public.GOLFER.GOLFER_HOME_COURSE</code>.
     */
    public final TableField<GolferRecord, String> GOLFER_HOME_COURSE = createField("GOLFER_HOME_COURSE", org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * Create a <code>public.GOLFER</code> table reference
     */
    public Golfer() {
        this(DSL.name("GOLFER"), null);
    }

    /**
     * Create an aliased <code>public.GOLFER</code> table reference
     */
    public Golfer(String alias) {
        this(DSL.name(alias), GOLFER);
    }

    /**
     * Create an aliased <code>public.GOLFER</code> table reference
     */
    public Golfer(Name alias) {
        this(alias, GOLFER);
    }

    private Golfer(Name alias, Table<GolferRecord> aliased) {
        this(alias, aliased, null);
    }

    private Golfer(Name alias, Table<GolferRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Golfer(Table<O> child, ForeignKey<O, GolferRecord> key) {
        super(child, key, GOLFER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<GolferRecord, Integer> getIdentity() {
        return Keys.IDENTITY_GOLFER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<GolferRecord> getPrimaryKey() {
        return Keys.GOLFER_ID_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<GolferRecord>> getKeys() {
        return Arrays.<UniqueKey<GolferRecord>>asList(Keys.GOLFER_ID_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Golfer as(String alias) {
        return new Golfer(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Golfer as(Name alias) {
        return new Golfer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Golfer rename(String name) {
        return new Golfer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Golfer rename(Name name) {
        return new Golfer(name, null);
    }
}
